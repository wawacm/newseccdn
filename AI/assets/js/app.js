class GeminiChatApp{constructor(){this.currentUser=null;this.currentSession=null;this.attachments=[];this.isLoading=false;this.init()}init(){this.bindEvents();this.checkAuth();this.autoResizeTextarea();this.initMobileFeatures();this.initPasteAndDrop();this.initNotification();this.initLoginStatusCheck();this.initThinkingButton();document.addEventListener('keydown',(e)=>{if(e.key==='Escape'){const sidebar=document.querySelector('.sidebar');if(sidebar&&sidebar.classList.contains('mobile-open')){this.forceCloseSidebar()}}});const existingBtn=document.getElementById('emergencyCloseBtn');if(existingBtn){existingBtn.remove()}}initNotification(){const notificationClose=document.getElementById('notificationClose');if(notificationClose){notificationClose.addEventListener('click',()=>this.hideNotification())}}initLoginStatusCheck(){setInterval(async()=>{if(this.currentUser&&!document.getElementById('loginPage').classList.contains('active')){try{const response=await this.apiCall('/auth/user');if(!response.success){this.handleLoginExpired()}}catch(error){console.log('登录状态检查失败:',error.message)}}},5*60*1000)}toggleMobileSidebar(){const sidebar=document.querySelector('.sidebar');const overlay=document.getElementById('sidebarOverlay');if(!sidebar)return;if(!overlay){const newOverlay=document.createElement('div');newOverlay.id='sidebarOverlay';newOverlay.className='sidebar-overlay';newOverlay.addEventListener('click',()=>this.closeMobileSidebar());document.body.appendChild(newOverlay)}if(sidebar.classList.contains('mobile-open')){this.closeMobileSidebar()}else{sidebar.classList.add('mobile-open');document.getElementById('sidebarOverlay').classList.add('active');document.body.style.overflow='hidden'}}closeMobileSidebar(){const sidebar=document.querySelector('.sidebar');const overlay=document.getElementById('sidebarOverlay');if(sidebar){sidebar.classList.remove('mobile-open')}if(overlay){overlay.classList.remove('active')}document.body.style.overflow=''}bindEvents(){document.getElementById('loginForm').addEventListener('submit',(e)=>this.handleLogin(e));document.getElementById('registerForm').addEventListener('submit',(e)=>this.handleRegister(e));document.querySelectorAll('.tab-btn').forEach(btn=>{btn.addEventListener('click',(e)=>this.switchAuthTab(e))});document.getElementById('newChatBtn').addEventListener('click',()=>this.createNewSession());document.getElementById('sendBtn').addEventListener('click',()=>this.sendMessage());document.getElementById('messageInput').addEventListener('keydown',(e)=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();if(!this.isLoading){this.sendMessage()}else{this.showNotification('WaWa AI正在回复中...请稍等','warning')}}});document.getElementById('messageInput').addEventListener('input',()=>this.updateSendButton());this.initMobileInputAdaptation();this.initLoginInputAdaptation();document.getElementById('editTitleBtn').addEventListener('click',()=>this.editSessionTitle());document.getElementById('attachBtn').addEventListener('click',()=>{document.getElementById('fileInput').click()});document.getElementById('fileInput').addEventListener('change',(e)=>this.handleFileUpload(e));document.getElementById('thinkingToggle').addEventListener('change',(e)=>{this.handleThinkingToggle(e)});document.getElementById('settingsBtn').addEventListener('click',()=>this.showAdminPanel());document.getElementById('backToChatBtn').addEventListener('click',()=>this.showChatPage());document.querySelectorAll('.admin-tab-btn').forEach(btn=>{btn.addEventListener('click',(e)=>this.switchAdminTab(e))});document.getElementById('addApiKeyBtn').addEventListener('click',()=>this.showAddApiKeyModal());document.getElementById('addUserBtn').addEventListener('click',()=>this.showAddUserModal());const clearLogsBtn=document.getElementById('clearLogsBtn');if(clearLogsBtn){clearLogsBtn.addEventListener('click',()=>this.clearLogs())}const closeSessionModal=document.getElementById('closeSessionModal');const closeSessionModalBtn=document.getElementById('closeSessionModalBtn');if(closeSessionModal){closeSessionModal.addEventListener('click',()=>{document.getElementById('sessionDetailModal').style.display='none'})}if(closeSessionModalBtn){closeSessionModalBtn.addEventListener('click',()=>{document.getElementById('sessionDetailModal').style.display='none'})}const prevSessionsPageBtn=document.getElementById('prevSessionsPage');const nextSessionsPageBtn=document.getElementById('nextSessionsPage');if(prevSessionsPageBtn){prevSessionsPageBtn.addEventListener('click',()=>this.changeSessionsPage(-1))}if(nextSessionsPageBtn){nextSessionsPageBtn.addEventListener('click',()=>this.changeSessionsPage(1))}const sessionSearchInput=document.getElementById('sessionSearchInput');if(sessionSearchInput){sessionSearchInput.addEventListener('input',(e)=>this.searchSessionsAdmin(e.target.value))}const refreshSessionsBtn=document.getElementById('refreshSessionsBtn');if(refreshSessionsBtn){refreshSessionsBtn.addEventListener('click',()=>this.loadSessionsAdmin())}document.getElementById('logoutBtn').addEventListener('click',()=>this.logout());document.getElementById('searchInput').addEventListener('input',(e)=>this.searchSessions(e.target.value));document.getElementById('modelSelect').addEventListener('change',(e)=>this.updateModelDisplay(e));const voiceCallBtn=document.getElementById('voiceCallBtn');if(voiceCallBtn){voiceCallBtn.addEventListener('click',()=>this.showDevelopmentNotice('语音通话'))}const videoCallBtn=document.getElementById('videoCallBtn');if(videoCallBtn){videoCallBtn.addEventListener('click',()=>this.showDevelopmentNotice('视频通话'))}const moreOptionsBtn=document.getElementById('moreOptionsBtn');if(moreOptionsBtn){moreOptionsBtn.addEventListener('click',()=>this.toggleMobileSidebar())}const mobileCloseBtn=document.getElementById('mobileCloseBtn');if(mobileCloseBtn){mobileCloseBtn.addEventListener('click',()=>this.forceCloseSidebar())}document.querySelector('.close').addEventListener('click',()=>this.closeModal());document.getElementById('notificationClose').addEventListener('click',()=>this.hideNotification());window.addEventListener('click',(e)=>{const modal=document.getElementById('modal');if(e.target===modal){this.closeModal()}})}initMobileFeatures(){this.isMobile=window.innerWidth<=768;window.addEventListener('resize',()=>{const wasMobile=this.isMobile;this.isMobile=window.innerWidth<=768;if(wasMobile!==this.isMobile){this.handleMobileToggle()}});this.setupMobileSidebar();this.setupTouchOptimizations()}setupMobileSidebar(){const sidebar=document.querySelector('.sidebar');const mainChat=document.querySelector('.main-chat');const chatHeader=document.querySelector('.chat-header');const modelSelector=document.querySelector('.model-selector');const oldBtn=document.getElementById('mobileSidebarToggle');if(oldBtn){oldBtn.remove()}const toggleBtn=document.createElement('button');toggleBtn.id='mobileSidebarToggle';toggleBtn.className='btn-icon';toggleBtn.innerHTML='<i class="fas fa-bars"></i>';toggleBtn.style.cssText=`width:auto;height:auto;padding:8px 12px;margin-right:10px;cursor:pointer;display:flex;align-items:center;justify-content:center;background:transparent;color:var(--text-primary);border:none;`;if(chatHeader){const chatTitle=chatHeader.querySelector('.chat-title');chatHeader.insertBefore(toggleBtn,chatTitle)}const toggleBtnElement=document.getElementById('mobileSidebarToggle');if(toggleBtnElement){toggleBtnElement.addEventListener('click',(e)=>{e.preventDefault();e.stopPropagation();e.stopImmediatePropagation();setTimeout(()=>{this.toggleMobileSidebar()},0)})}this.setupOutsideClickListener();if(sidebar){sidebar.addEventListener('click',(e)=>{e.stopPropagation()})}}toggleMobileSidebar(){const sidebar=document.querySelector('.sidebar');const toggleBtn=document.getElementById('mobileSidebarToggle');if(sidebar){setTimeout(()=>{const actualClasses=sidebar.getAttribute('class')||'';const domHasMobileOpen=actualClasses.includes('mobile-open');const jsHasMobileOpen=sidebar.classList.contains('mobile-open');const computedStyle=window.getComputedStyle(sidebar);const isVisuallyOpen=computedStyle.transform&&(computedStyle.transform.includes('translateY(0')||computedStyle.transform==='matrix(1, 0, 0, 1, 0, 0)')&&computedStyle.opacity==='1';const shouldClose=domHasMobileOpen||jsHasMobileOpen||isVisuallyOpen;if(shouldClose){sidebar.classList.remove('mobile-open');sidebar.className=sidebar.className.replace(/mobile-open/g,'').replace(/\s+/g,' ').trim();sidebar.style.transform='';sidebar.style.opacity='';sidebar.style.visibility='';if(toggleBtn){toggleBtn.innerHTML='<i class="fas fa-bars"></i>'}}else{sidebar.className='sidebar mobile-open';if(toggleBtn){toggleBtn.innerHTML='<i class="fas fa-times"></i>'}sidebar.style.transform='translateY(0)';sidebar.style.opacity='1';sidebar.style.visibility='visible'}},5)}}openMobileSidebar(){const sidebar=document.querySelector('.sidebar');const toggleBtn=document.getElementById('mobileSidebarToggle');if(sidebar){sidebar.classList.add('mobile-open')}if(toggleBtn){toggleBtn.innerHTML='<i class="fas fa-times"></i>'}}closeMobileSidebar(){const sidebar=document.querySelector('.sidebar');const toggleBtn=document.getElementById('mobileSidebarToggle');if(sidebar){sidebar.classList.remove('mobile-open');if(toggleBtn){toggleBtn.innerHTML='<i class="fas fa-bars"></i>'}}else{}}forceCloseSidebar(){const sidebar=document.querySelector('.sidebar');const toggleBtn=document.getElementById('mobileSidebarToggle');if(sidebar){sidebar.classList.remove('mobile-open');sidebar.className='sidebar';sidebar.style.transform='';sidebar.style.opacity='';sidebar.style.visibility=''}if(toggleBtn){toggleBtn.innerHTML='<i class="fas fa-bars"></i>'}}addEmergencyCloseButton(){const oldEmergencyBtn=document.getElementById('emergencyCloseBtn');if(oldEmergencyBtn){oldEmergencyBtn.remove()}const emergencyBtn=document.createElement('button');emergencyBtn.id='emergencyCloseBtn';emergencyBtn.innerHTML='✕ 关闭侧边栏';emergencyBtn.style.cssText=`position:fixed;top:10px;right:10px;z-index:9999;background:#ff4444;color:white;border:none;padding:10px 15px;border-radius:5px;cursor:pointer;font-size:14px;font-weight:bold;box-shadow:0 2px 10px rgba(0,0,0,0.3);display:none;`;emergencyBtn.addEventListener('click',(e)=>{e.stopPropagation();this.forceCloseSidebar()});document.body.appendChild(emergencyBtn);const sidebar=document.querySelector('.sidebar');if(sidebar){const observer=new MutationObserver(()=>{if(sidebar.classList.contains('mobile-open')){emergencyBtn.style.display='block'}else{emergencyBtn.style.display='none'}});observer.observe(sidebar,{attributes:true})}}setupOutsideClickListener(){if(this.outsideClickHandler){document.removeEventListener('click',this.outsideClickHandler,true)}this.outsideClickHandler=(e)=>{const sidebar=document.querySelector('.sidebar');const toggleBtn=document.getElementById('mobileSidebarToggle');if(sidebar){const actualClasses=sidebar.getAttribute('class')||'';const domHasMobileOpen=actualClasses.includes('mobile-open');if(domHasMobileOpen){let clickedInside=false;if(sidebar.contains(e.target)){clickedInside=true}if(toggleBtn){if(toggleBtn.contains(e.target)||toggleBtn===e.target){clickedInside=true}const icon=toggleBtn.querySelector('i');if(icon&&(icon.contains(e.target)||icon===e.target)){clickedInside=true}}if(!clickedInside){this.forceCloseSidebar()}}}};document.addEventListener('click',this.outsideClickHandler,true)}handleMobileToggle(){const sidebar=document.querySelector('.sidebar');if(this.isMobile){this.setupMobileSidebar()}else{const toggleBtn=document.getElementById('mobileSidebarToggle');if(toggleBtn){toggleBtn.remove()}if(sidebar){sidebar.classList.remove('mobile-open')}if(this.outsideClickHandler){document.removeEventListener('click',this.outsideClickHandler,true);this.outsideClickHandler=null}}}setupTouchOptimizations(){let lastTouchEnd=0;document.addEventListener('touchend',(e)=>{const now=(new Date()).getTime();if(now-lastTouchEnd<=300){e.preventDefault()}lastTouchEnd=now},false);if(this.isMobile){let startX=0;let startY=0;let currentX=0;let currentY=0;document.addEventListener('touchstart',(e)=>{startX=e.touches[0].clientX;startY=e.touches[0].clientY});document.addEventListener('touchmove',(e)=>{if(!startX||!startY)return;currentX=e.touches[0].clientX;currentY=e.touches[0].clientY;const diffX=startX-currentX;const diffY=startY-currentY;if(Math.abs(diffX)>Math.abs(diffY)){const sidebar=document.querySelector('.sidebar');if(diffX<-50&&startX<50){this.openMobileSidebar()}else if(diffX>50&&sidebar&&sidebar.classList.contains('mobile-open')){this.closeMobileSidebar()}}});document.addEventListener('touchend',()=>{startX=0;startY=0;currentX=0;currentY=0})}}async checkAuth(){try{const response=await this.apiCall('/auth/user');if(response.success){this.currentUser=response.user;this.showChatPage();this.loadSessions()}else{this.showLoginPage()}}catch(error){this.showLoginPage()}}async apiCall(endpoint,options={}){const url=`api${endpoint}`;const isChatMessage=endpoint==='/chat/messages'&&options.method==='POST';const isImageGen=endpoint==='/generate-image';const timeout=isChatMessage||isImageGen?120000:15000;const config={method:'GET',headers:{'Content-Type':'application/json','Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},credentials:'same-origin',...options};if(config.body&&typeof config.body==='object'){config.body=JSON.stringify(config.body)}const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeout);config.signal=controller.signal;try{const response=await fetch(url,config);clearTimeout(timeoutId);if(response.status===401){console.log('检测到登录过期，自动跳转到登录页面');this.handleLoginExpired();throw new Error('登录已过期，请重新登录');}if(response.status===503){throw new Error('服务器繁忙，请稍后重试');}if(response.status===504){throw new Error('请求超时，服务器响应过慢，请稍后重试');}const contentType=response.headers.get('content-type');if(!contentType||!contentType.includes('application/json')){const text=await response.text();console.error('非JSON响应:',text);if(isChatMessage&&text.trim()===''){console.warn('响应为空，可能被截断，尝试重新加载消息...');await new Promise(resolve=>setTimeout(resolve,1000));throw new Error('响应为空，请刷新页面查看消息');}throw new Error('服务器返回了非JSON格式的响应');}let data;try{data=await response.json()}catch(error){console.error('JSON解析失败:',error);if(isChatMessage){throw new Error('响应解析失败，消息可能已保存，请刷新页面查看');}throw new Error('响应不是有效的JSON格式');}if(!response.ok){throw new Error(data.error||'请求失败');}return data}catch(error){clearTimeout(timeoutId);if(error.name==='AbortError'){throw new Error(`请求超时（${timeout/1000}秒），服务器响应过慢，请稍后重试`)}if(error.message.includes('Failed to fetch')||error.message.includes('NetworkError')){throw new Error('网络连接失败，请检查网络后重试');}throw error;}}handleLoginExpired(){this.currentUser=null;this.currentSession=null;this.attachments=[];this.isLoading=false;this.clearUserData();this.resetAllUIElements();this.showNotification('登录已过期，请重新登录','warning');setTimeout(()=>{this.showLoginPage()},1500)}showNotification(message,type='info'){const notification=document.getElementById('notification');const text=document.getElementById('notificationText');if(!notification||!text){console.warn('Notification elements not found');return}text.textContent=message;notification.className=`notification ${type}`;notification.offsetHeight;setTimeout(()=>{notification.classList.add('show')},10);clearTimeout(this.notificationTimeout);this.notificationTimeout=setTimeout(()=>{this.hideNotification()},4000)}hideNotification(){const notification=document.getElementById('notification');if(notification){notification.classList.remove('show')}}showPage(pageId){document.querySelectorAll('.page').forEach(page=>{page.classList.remove('active')});document.getElementById(pageId).classList.add('active')}showLoginPage(){this.showPage('loginPage')}showChatPage(){this.showPage('chatPage');if(this.currentUser){document.getElementById('currentUsername').textContent=this.currentUser.username;const settingsBtn=document.getElementById('settingsBtn');if(this.currentUser.is_admin){settingsBtn.style.display='flex'}else{settingsBtn.style.display='none'}this.updateModelSelector();this.resetChatInterface()}}resetChatInterface(){this.currentSession=null;const currentSessionTitle=document.getElementById('currentSessionTitle');if(currentSessionTitle){currentSessionTitle.textContent='AI智能助手'}const editTitleBtn=document.getElementById('editTitleBtn');if(editTitleBtn){editTitleBtn.style.display='none'}this.showWelcomeMessage();const messageInput=document.getElementById('messageInput');if(messageInput){messageInput.value='';messageInput.disabled=false;messageInput.placeholder='输入您的消息... (支持 Ctrl+V 粘贴图片)';messageInput.style.pointerEvents='auto'}const sendBtn=document.getElementById('sendBtn');if(sendBtn){sendBtn.disabled=true;sendBtn.innerHTML='<i class="fas fa-paper-plane"></i>'}const attachBtn=document.getElementById('attachBtn');if(attachBtn){attachBtn.disabled=false}this.attachments=[];this.updateAttachmentPreview();this.isLoading=false;this.removeThinkingMessage()}updateModelSelector(){const modelSelect=document.getElementById('modelSelect');const proOption=modelSelect.querySelector('option[value="gemini-2.5-pro"]');if(this.currentUser&&!this.currentUser.can_use_pro){proOption.disabled=true;proOption.textContent='Wawa&Gemini Pro(需要Pro权限)';if(modelSelect.value==='gemini-2.5-pro'){modelSelect.value='gemini-2.5-flash'}}else{proOption.disabled=false;proOption.textContent='Wawa&Gemini Pro'}}showAdminPanel(){if(!this.currentUser||!this.currentUser.is_admin){this.showNotification('权限不足','error');return}this.showPage('adminPage');this.loadAdminData()}switchAuthTab(e){const tab=e.target.dataset.tab;document.querySelectorAll('.tab-btn').forEach(btn=>{btn.classList.remove('active')});e.target.classList.add('active');document.querySelectorAll('.auth-form').forEach(form=>{form.classList.remove('active')});document.getElementById(`${tab}Form`).classList.add('active')}async handleLogin(e){e.preventDefault();const username=document.getElementById('loginUsername').value;const password=document.getElementById('loginPassword').value;if(!username||!password){this.showNotification('请填写用户名和密码','error');return}try{const response=await this.apiCall('/auth/login',{method:'POST',body:{username,password}});if(response.success){this.currentUser=response.user;this.clearUserData();this.showNotification('登录成功','success');if(response.last_login_time){setTimeout(()=>{const lastLoginTime=this.formatLastLoginTime(response.last_login_time);this.showNotification(`上次登录时间：${lastLoginTime}`,'info',5000)},1500)}this.showChatPage();setTimeout(()=>{this.loadSessions()},100)}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}clearUserData(){this.currentSession=null;this.attachments=[];this.isLoading=false;const sessionList=document.getElementById('sessionList');if(sessionList){sessionList.innerHTML=''}const chatMessages=document.getElementById('chatMessages');if(chatMessages){chatMessages.innerHTML=''}document.querySelectorAll('[data-is-temp="true"]').forEach(item=>{item.remove()});this.removeThinkingMessage();console.log('✅ 用户数据已清空')}async handleRegister(e){e.preventDefault();const username=document.getElementById('registerUsername').value;const email=document.getElementById('registerEmail').value;const password=document.getElementById('registerPassword').value;const confirmPassword=document.getElementById('confirmPassword').value;if(!username||!password){this.showNotification('请填写用户名和密码','error');return}if(password!==confirmPassword){this.showNotification('两次输入的密码不一致','error');return}try{const response=await this.apiCall('/auth/register',{method:'POST',body:{username,email,password}});if(response.success){this.showNotification('注册成功，请登录','success');document.querySelector('.tab-btn[data-tab="login"]').click();document.getElementById('registerForm').reset()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async logout(){try{await this.apiCall('/auth/logout');this.clearUserData();this.currentUser=null;this.resetAllUIElements();this.showNotification('已退出登录','success');this.showLoginPage()}catch(error){this.showNotification(error.message,'error')}}resetAllUIElements(){const modelSelect=document.getElementById('modelSelect');if(modelSelect){modelSelect.value='gemini-2.5-flash'}this.updateAttachmentPreview();this.closeMobileSidebar();console.log('✅ 所有UI元素已重置')}showDevelopmentNotice(featureName){this.showNotification(`🚧${featureName}功能正在开发中，敬请期待！`,'info')}updateModelDisplay(e){const modelValue=e.target.value;const modelDisplayElement=document.getElementById('currentModelDisplay');if(modelDisplayElement){const modelNames={'gemini-2.5-flash':'Wawa&Gemin','gemini-2.5-pro':'Wawa&Gemin(Pro)'};modelDisplayElement.textContent=modelNames[modelValue]||'Wawa&Gemin'}}async updateSessionListOnly(){try{const timestamp=Date.now();const response=await this.apiCall(`/chat/sessions?_t=${timestamp}`);if(response.success){this.renderSessions(response.sessions||[])}}catch(error){console.error('❌ 更新会话列表失败:',error)}}highlightCurrentSession(sessionId){document.querySelectorAll('.session-item').forEach(item=>{item.classList.remove('active')});const currentItem=document.querySelector(`[data-session-id="${sessionId}"]`);if(currentItem){currentItem.classList.add('active')}this.closeMobileSidebar();if(this.isMobile){this.closeMobileSidebar()}}async loadSessions(){try{const timestamp=Date.now();const response=await this.apiCall(`/chat/sessions?_t=${timestamp}`);if(response.success){this.renderSessions(response.sessions||[])}else{console.error('❌ 加载会话失败:',response.error);this.showNotification('加载会话失败','error')}}catch(error){console.error('❌ 加载会话异常:',error);this.showNotification('加载会话失败','error')}}renderSessions(sessions){const sessionList=document.getElementById('sessionList');sessionList.innerHTML='';if(!sessions||sessions.length===0){return}sessions.forEach((session,index)=>{const sessionItem=document.createElement('div');sessionItem.className='session-item';sessionItem.dataset.sessionId=session.id;if(this.currentSession&&this.currentSession.id==session.id){sessionItem.classList.add('active')}sessionItem.addEventListener('click',()=>this.selectSession(session));sessionItem.innerHTML=`<div class="session-item-title">${session.title}</div><div class="session-item-preview">${this.sanitizePreviewText(session.last_message||'暂无消息')}</div><div class="session-item-actions"><button class="session-delete-btn"onclick="event.stopPropagation(); app.deleteSession(${session.id});"title="删除"><i class="fas fa-trash"></i></button></div>`;sessionList.appendChild(sessionItem)})}async createNewSession(){const tempSession={id:'temp-'+Date.now(),title:'新对话',messages:[],isTemp:true};this.selectSession(tempSession);this.addTempSessionToList(tempSession);try{const response=await this.apiCall('/chat/sessions',{method:'POST',body:{title:'新对话'}});if(response.success){const realSession={id:response.session_id,title:response.title,messages:[]};this.currentSession=realSession;document.getElementById('currentSessionTitle').textContent=realSession.title;this.removeTempSessionFromList(tempSession.id);await this.updateSessionListOnly();this.highlightCurrentSession(realSession.id)}else{this.removeTempSessionFromList(tempSession.id);this.showNotification('创建会话失败: '+(response.message||''),'error')}}catch(error){this.removeTempSessionFromList(tempSession.id);this.showNotification('创建会话失败','error')}}addTempSessionToList(session){const sessionList=document.getElementById('sessionList');const sessionItem=document.createElement('div');sessionItem.className='session-item active';sessionItem.dataset.sessionId=session.id;sessionItem.dataset.isTemp='true';sessionItem.innerHTML=`<div class="session-item-title">${session.title}</div><div class="session-item-preview">正在创建...</div><div class="session-item-actions"><div class="session-loading"><i class="fas fa-spinner fa-spin"></i></div></div>`;sessionList.insertBefore(sessionItem,sessionList.firstChild);document.querySelectorAll('.session-item').forEach(item=>{if(item!==sessionItem){item.classList.remove('active')}})}removeTempSessionFromList(sessionId){const sessionItem=document.querySelector(`[data-session-id="${sessionId}"]`);if(sessionItem&&sessionItem.dataset.isTemp==='true'){sessionItem.remove()}}async selectSession(session){const previousSessionId=this.currentSession?this.currentSession.id:null;if(this.isMobile&&previousSessionId===session.id){const chatMessages=document.getElementById('chatMessages');const hasMessages=chatMessages.querySelectorAll('.message:not(.welcome-message)').length>0;if(hasMessages){this.closeMobileSidebar();return}}this.currentSession=session;document.getElementById('currentSessionTitle').textContent=session.title;document.getElementById('editTitleBtn').style.display='flex';document.querySelectorAll('.session-item').forEach(item=>{item.classList.remove('active')});const currentItem=document.querySelector(`[data-session-id="${session.id}"]`);if(currentItem){currentItem.classList.add('active')}this.closeMobileSidebar();if(session.isTemp){return}this.showLoadingMessages();await this.loadMessages(session.id)}async editSessionTitle(){if(!this.currentSession){this.showNotification('请先选择一个会话','error');return}const currentTitle=this.currentSession.title;const newTitle=prompt('请输入新的会话标题:',currentTitle);if(newTitle&&newTitle.trim()!==''&&newTitle!==currentTitle){try{const response=await this.apiCall(`/chat/session`,{method:'PUT',body:{session_id:this.currentSession.id,title:newTitle.trim()}});if(response.success){this.currentSession.title=newTitle.trim();document.getElementById('currentSessionTitle').textContent=newTitle.trim();this.loadSessions();this.showNotification('会话标题已更新','success')}else{this.showNotification(response.message||'更新标题失败','error')}}catch(error){this.showNotification('更新标题失败: '+error.message,'error')}}}async loadMessages(sessionId){try{const response=await this.apiCall(`/chat/messages?session_id=${sessionId}`);if(response.success){this.renderMessages(response.messages)}else{this.showWelcomeMessage()}}catch(error){this.showNotification('加载消息失败','error');this.showWelcomeMessage()}}renderMessages(messages){const chatMessages=document.getElementById('chatMessages');chatMessages.innerHTML='';if(!messages||messages.length===0){this.showWelcomeMessage();return}messages.forEach(message=>{this.addMessageToUI(message)});this.scrollToBottom();setTimeout(()=>{this.renderMathFormulas()},10)}showWelcomeMessage(){const chatMessages=document.getElementById('chatMessages');chatMessages.innerHTML=`<div class="welcome-message"><div class="welcome-icon"><i class="fas fa-robot"></i></div><h3>欢迎使用WawaCloud AI聊天助手</h3><p>我是娃娃团队旗下基于googleGemini训练开发的Ai助手</p><p>我可以帮助您解答问题、分析图片、处理文档等。开始新对话吧！</p><div class="feature-list"><div class="feature-item"><i class="fas fa-image"></i><span>图片分析</span></div><div class="feature-item"><i class="fas fa-palette"></i><span>AI绘图(开发中)</span></div><div class="feature-item"><i class="fas fa-brain"></i><span>智能推理</span></div><div class="feature-item"><i class="fas fa-file-alt"></i><span>文档处理</span></div></div></div>`}showLoadingMessages(){const chatMessages=document.getElementById('chatMessages');chatMessages.innerHTML=`<div class="welcome-message"><div class="welcome-icon"><i class="fas fa-spinner fa-spin"></i></div><h3>加载消息中...</h3><p>正在获取历史对话内容</p></div>`}addMessageToUI(message){const chatMessages=document.getElementById('chatMessages');const welcomeMessage=chatMessages.querySelector('.welcome-message');if(welcomeMessage){welcomeMessage.remove()}const messageDiv=document.createElement('div');messageDiv.className=`message ${message.role}`;const avatar=message.role==='user'?'<i class="fas fa-user"></i>':'<i class="fas fa-robot"></i>';let attachmentHtml='';if(message.attachments&&message.attachments.length>0){attachmentHtml='<div class="message-attachments">';message.attachments.forEach((attachment,index)=>{const icon=this.getFileIcon(attachment.category);const isImage=attachment.category==='images';const attachmentId=`attachment-${Date.now()}-${index}`;if(isImage){attachmentHtml+=`<div class="image-attachment-container"><div class="attachment-item image-attachment"data-image-url="${attachment.url}"onclick="app.showImagePreview('${attachment.url}', '${attachment.name}')"><i class="${icon}"></i><span class="attachment-name">${attachment.name}</span><i class="fas fa-search-plus preview-icon"></i></div><img class="image-thumbnail"src="${attachment.url}"alt="${attachment.name}"onclick="app.showImagePreview('${attachment.url}', '${attachment.name}')"onerror="this.style.display='none'"></div>`}else{attachmentHtml+=`<div class="attachment-item"><i class="${icon}"></i><span>${attachment.name}</span></div>`}});attachmentHtml+='</div>'}const isHtmlContent=message.content.includes('<div class="generated-image">')||message.content.includes('<img src="data:')||message.content.includes('<div class="')||message.content.includes('<img ')||message.content.includes('<p class="')||message.content.includes('<span class="');const messageContent=isHtmlContent?message.content:this.formatMessageText(message.content);messageDiv.innerHTML=`<div class="message-avatar">${avatar}</div><div class="message-content">${attachmentHtml}<div class="message-bubble"><div class="message-text">${messageContent}</div><div class="message-time">${this.formatTime(message.created_at)}</div></div></div>`;chatMessages.appendChild(messageDiv);setTimeout(()=>{this.renderMathFormulas()},10)}formatMessageText(text){text=this.processCodeBlocks(text);text=this.processMathFormulas(text);text=text.replace(/\*\*(.*?)\*\*/g,'<strong>$1</strong>').replace(/\*(.*?)\*/g,'<em>$1</em>').replace(/`(.*?)`/g,'<code>$1</code>').replace(/\n/g,'<br>');return text}processMathFormulas(text){text=text.replace(/(?<!\$)\$(?!\$)([^$\n]+?)\$(?!\$)/g,(match,formula)=>{const mathId='math-'+Date.now()+'-'+Math.random().toString(36).substr(2,9);return'<span class="math-formula inline" id="'+mathId+'" data-formula="'+this.escapeHtml(formula)+'">$'+this.escapeHtml(formula)+'$</span>'});text=text.replace(/\$\$([\s\S]*?)\$\$/g,(match,formula)=>{const mathId='math-'+Date.now()+'-'+Math.random().toString(36).substr(2,9);return'<div class="math-formula display" id="'+mathId+'" data-formula="'+this.escapeHtml(formula.trim())+'">$$'+this.escapeHtml(formula.trim())+'$$</div>'});return text}renderMathFormulas(){const mathElements=document.querySelectorAll('.math-formula[data-formula]');mathElements.forEach(element=>{const formula=element.getAttribute('data-formula');const isDisplay=element.classList.contains('display');try{if(window.katex){katex.render(formula,element,{displayMode:isDisplay,throwOnError:false,strict:false,trust:false});element.removeAttribute('data-formula')}}catch(error){console.warn('数学公式渲染失败:',error)}})}processCodeBlocks(text){const codeBlockRegex=/```([a-zA-Z]*)(\r?\n)?([\s\S]*?)```/g;return text.replace(codeBlockRegex,(match,language,newline,code)=>{code=code.trim();const escapedCode=this.escapeHtml(code);const blockId='code-block-'+Date.now()+'-'+Math.random().toString(36).substr(2,9);return'<div class="code-block-container" data-language="'+(language||'text')+'"><div class="code-block-header"><span class="code-language">'+(language||'Text')+'</span><div class="code-actions"><button class="code-action-btn" onclick="app.copyCodeBlock(\''+blockId+'\')" title="复制代码"><i class="fas fa-copy"></i></button><button class="code-action-btn" onclick="app.editCodeBlock(\''+blockId+'\', \''+(language||'text')+'\')" title="编辑代码"><i class="fas fa-edit"></i></button><button class="code-action-btn" onclick="app.fullscreenCodeBlock(\''+blockId+'\')" title="全屏查看"><i class="fas fa-expand"></i></button></div></div><pre class="code-block" id="'+blockId+'"><code>'+escapedCode+'</code></pre></div>'})}escapeHtml(text){const map={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'};return text.replace(/[&<>"']/g,function(m){return map[m]})}sanitizePreviewText(text){if(!text||typeof text!=='string'){return'暂无消息'}text=text.replace(/```[\s\S]*?```/g,'[代码块]');text=text.replace(/`[^`]*`/g,'[代码]');text=text.replace(/<[^>]*>/g,'');text=text.replace(/\s+/g,' ').trim();if(text.length>50){text=text.substring(0,50)+'...'}return text||'暂无消息'}copyCodeBlock(blockId){const codeBlock=document.getElementById(blockId);if(codeBlock){const code=codeBlock.textContent;navigator.clipboard.writeText(code).then(()=>{this.showNotification('代码已复制到剪贴板','success')}).catch(()=>{const textArea=document.createElement('textarea');textArea.value=code;document.body.appendChild(textArea);textArea.select();document.execCommand('copy');document.body.removeChild(textArea);this.showNotification('代码已复制到剪贴板','success')})}}editCodeBlock(blockId,language){const codeBlock=document.getElementById(blockId);if(codeBlock){const code=codeBlock.textContent;this.showCodeEditor(code,language,blockId)}}fullscreenCodeBlock(blockId){const codeBlock=document.getElementById(blockId);if(codeBlock){const code=codeBlock.textContent;const language=codeBlock.closest('.code-block-container').dataset.language;this.showFullscreenCode(code,language)}}showCodeEditor(code,language,blockId){const modal=document.createElement('div');modal.className='code-editor-modal';modal.innerHTML='<div class="code-editor-overlay" onclick="this.parentElement.remove()"></div><div class="code-editor-container"><div class="code-editor-header"><h3>编辑代码 - '+language.toUpperCase()+'</h3><button class="close-btn" onclick="this.closest(\'.code-editor-modal\').remove()"><i class="fas fa-times"></i></button></div><div class="code-editor-body"><textarea class="code-editor-textarea" placeholder="在此编辑代码...">'+this.escapeHtml(code)+'</textarea></div><div class="code-editor-actions"><button class="btn btn-secondary" onclick="this.closest(\'.code-editor-modal\').remove()">取消</button><button class="btn btn-primary" onclick="app.saveCodeEdit(\''+blockId+'\', this)">保存</button><button class="btn btn-success" onclick="app.copyFromEditor(this)">复制</button></div></div>';document.body.appendChild(modal);setTimeout(()=>{const textarea=modal.querySelector('.code-editor-textarea');textarea.focus()},100)}showFullscreenCode(code,language){const modal=document.createElement('div');modal.className='code-fullscreen-modal';modal.innerHTML='<div class="code-fullscreen-overlay" onclick="this.parentElement.remove()"></div><div class="code-fullscreen-container"><div class="code-fullscreen-header"><h3>'+language.toUpperCase()+' 代码</h3><div class="code-fullscreen-actions"><button class="code-action-btn" onclick="app.copyFromFullscreen(this)" title="复制代码"><i class="fas fa-copy"></i> 复制</button><button class="close-btn" onclick="this.closest(\'.code-fullscreen-modal\').remove()" title="关闭"><i class="fas fa-times"></i></button></div></div><div class="code-fullscreen-body"><pre class="code-fullscreen-block"><code>'+this.escapeHtml(code)+'</code></pre></div></div>';document.body.appendChild(modal)}saveCodeEdit(blockId,button){const modal=button.closest('.code-editor-modal');const textarea=modal.querySelector('.code-editor-textarea');const newCode=textarea.value;const codeBlock=document.getElementById(blockId);if(codeBlock){codeBlock.textContent=newCode}modal.remove();this.showNotification('代码已更新','success')}copyFromEditor(button){const textarea=button.closest('.code-editor-modal').querySelector('.code-editor-textarea');const code=textarea.value;navigator.clipboard.writeText(code).then(()=>{this.showNotification('代码已复制到剪贴板','success')}).catch(()=>{textarea.select();document.execCommand('copy');this.showNotification('代码已复制到剪贴板','success')})}copyFromFullscreen(button){const codeBlock=button.closest('.code-fullscreen-modal').querySelector('.code-fullscreen-block');const code=codeBlock.textContent;navigator.clipboard.writeText(code).then(()=>{this.showNotification('代码已复制到剪贴板','success')}).catch(()=>{const textArea=document.createElement('textarea');textArea.value=code;document.body.appendChild(textArea);textArea.select();document.execCommand('copy');document.body.removeChild(textArea);this.showNotification('代码已复制到剪贴板','success')})}async sendMessage(){if(this.isLoading)return;this.isLoading=true;this.updateSendButton();this.disableUserInput(true);const messageInput=document.getElementById('messageInput');const message=messageInput.value.trim();if(!message&&this.attachments.length===0){this.showNotification('请输入消息内容','error');this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}if(message.startsWith('/image ')||message.startsWith('/图片 ')){const prompt=message.replace(/^\/(image|图片)\s+/,'').trim();if(!prompt){this.showNotification('请输入图片描述，例如：/image 一只可爱的猫','error');this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}await this.generateImage(prompt);this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}const imageKeywords=['画','绘','生成图片','画个','画一','画张','生成一张','给我画','帮我画','draw','paint','generate image','create image','make a picture'];const lowerMessage=message.toLowerCase();const wantsImage=imageKeywords.some(keyword=>lowerMessage.includes(keyword)||message.includes(keyword));if(wantsImage&&!message.startsWith('/')){let possiblePrompt=message;possiblePrompt=possiblePrompt.replace(/^(请|帮我|给我|能不能|可以|可否)*(画|绘|生成|创建)*(一个|一张|个|张)*/,'').trim();if(possiblePrompt){this.showNotification('🎨 正在为您生成图片...','info',3000);await this.generateImage(possiblePrompt);this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}}if(this.attachments.length>0){let totalSize=0;const imageAttachments=this.attachments.filter(att=>att.category==='images'||['jpg','jpeg','png','gif','webp'].includes(att.path.split('.').pop().toLowerCase()));for(const attachment of imageAttachments){if(attachment.size){totalSize+=attachment.size}}const totalSizeMB=totalSize/(1024*1024);if(totalSizeMB>10){this.showNotification(`❌图片过大（${totalSizeMB.toFixed(2)}MB），请到https:'error',8000);this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}if(totalSizeMB>5){this.showNotification(`⚠️图片较大（${totalSizeMB.toFixed(2)}MB），可能会造成上传缓慢`,'warning',5000)}}if(!this.currentSession){await this.createNewSession();if(!this.currentSession){this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}}let thinkingMessageId=null;try{const model=document.getElementById('modelSelect').value;if(model==='gemini-2.5-pro'&&this.currentUser&&!this.currentUser.can_use_pro){this.showNotification('您没有Pro访问权限，无法使用Pro模型','error');this.isLoading=false;this.updateSendButton();this.disableUserInput(false);return}this.addMessageToUI({role:'user',content:message,attachments:this.attachments.length>0?[...this.attachments]:undefined,created_at:new Date().toISOString()});thinkingMessageId=this.addThinkingMessage();const userAttachments=[...this.attachments];messageInput.value='';this.attachments=[];this.updateAttachmentPreview();this.scrollToBottom();const thinkingToggle=document.getElementById('thinkingToggle');const enableThinking=thinkingToggle&&thinkingToggle.checked;const response=await this.apiCall('/chat/messages',{method:'POST',body:{session_id:this.currentSession.id,message:message,model:model,attachments:userAttachments,enable_thinking:enableThinking}});this.removeThinkingMessage(thinkingMessageId);if(response.success){this.addMessageToUI({role:'assistant',content:response.content,created_at:new Date().toISOString()});this.scrollToBottom();let delay=100;if(this.isMobile){const screenHeight=window.innerHeight;if(screenHeight>=900){return}else if(screenHeight>=800){return}else if(screenHeight>=700){delay=2000}else{delay=1500}}setTimeout(()=>{if(this.isMobile){this.updateSessionListOnly()}else{this.loadSessions()}},delay);if(response.context_warning){const estimatedTokens=response.estimated_tokens||0;const formattedTokens=estimatedTokens.toLocaleString();this.showNotification(`⚠️上下文较长（约${formattedTokens}tokens），建议开启新对话以获得更好的回复质量。`,'warning')}}else{if(response.context_too_long){const estimatedTokens=response.estimated_tokens||0;const limit=response.limit||0;const formattedTokens=estimatedTokens.toLocaleString();const formattedLimit=limit.toLocaleString();this.showNotification(`❌${response.error}当前:${formattedTokens}tokens限制:${formattedLimit}tokens点击左上角"+"号创建新对话`,'error')}else if(response.is_thinking){this.showNotification('⏳ '+response.error,'warning')}else{this.showNotification(response.error,'error')}}}catch(error){this.showNotification(error.message,'error');if(error.message.includes('刷新页面查看')){console.log('检测到响应丢失，自动重新加载最新消息...');setTimeout(async()=>{try{await this.loadMessages(this.currentSession.id);this.showNotification('✅ 消息已自动加载','success',2000)}catch(reloadError){console.error('重新加载消息失败:',reloadError)}},1500)}}finally{if(thinkingMessageId){this.removeThinkingMessage(thinkingMessageId)}this.isLoading=false;this.updateSendButton();this.disableUserInput(false)}}updateSendButton(){const sendBtn=document.getElementById('sendBtn');const messageInput=document.getElementById('messageInput');const hasContent=messageInput.value.trim()||this.attachments.length>0;sendBtn.disabled=this.isLoading||!hasContent;if(this.isLoading){sendBtn.innerHTML='<div class="loading"></div>'}else{sendBtn.innerHTML='<i class="fas fa-paper-plane"></i>'}}disableUserInput(disabled){const messageInput=document.getElementById('messageInput');const sendBtn=document.getElementById('sendBtn');const attachBtn=document.getElementById('attachBtn');if(disabled){messageInput.disabled=true;messageInput.placeholder='模型正在思考中，请稍等...';sendBtn.disabled=true;attachBtn.disabled=true;messageInput.style.pointerEvents='none'}else{messageInput.disabled=false;messageInput.placeholder='输入您的消息... (支持 Ctrl+V 粘贴图片)';sendBtn.disabled=false;attachBtn.disabled=false;messageInput.style.pointerEvents='auto';setTimeout(()=>{messageInput.focus()},100)}}addThinkingMessage(){const chatMessages=document.getElementById('chatMessages');const messageDiv=document.createElement('div');messageDiv.className='message assistant thinking-message';const thinkingId='thinking-'+Date.now();messageDiv.id=thinkingId;messageDiv.innerHTML=`<div class="message-avatar"><i class="fas fa-robot"></i></div><div class="message-content"><div class="message-bubble"><div class="message-text"><div class="thinking-animation"><span class="thinking-text">正在思考...</span><span class="thinking-dots"><span class="dot">.</span><span class="dot">.</span><span class="dot">.</span></span></div></div></div></div>`;chatMessages.appendChild(messageDiv);this.scrollToBottom();const thinkingTextElement=messageDiv.querySelector('.thinking-text');const timer1=setTimeout(()=>{if(document.getElementById(thinkingId)){thinkingTextElement.textContent='我还在思考中，请稍等...';this.scrollToBottom()}},10000);const timer2=setTimeout(()=>{if(document.getElementById(thinkingId)){thinkingTextElement.textContent='当前问题有点复杂，请稍等...';this.scrollToBottom()}},20000);const timer3=setTimeout(()=>{if(document.getElementById(thinkingId)){thinkingTextElement.textContent='由于网络问题，我卡了，请刷新并且尝试重新提问，抱歉!';thinkingTextElement.style.color='#ef4444';this.scrollToBottom()}},30000);messageDiv.thinkingTimers=[timer1,timer2,timer3];return thinkingId}removeThinkingMessage(thinkingId=null){if(thinkingId){const thinkingElement=document.getElementById(thinkingId);if(thinkingElement){if(thinkingElement.thinkingTimers){thinkingElement.thinkingTimers.forEach(timer=>clearTimeout(timer))}thinkingElement.remove()}}else{const thinkingMessages=document.querySelectorAll('.thinking-message');thinkingMessages.forEach(msg=>{if(msg.thinkingTimers){msg.thinkingTimers.forEach(timer=>clearTimeout(timer))}msg.remove()})}}initThinkingButton(){const checkbox=document.getElementById('thinkingToggle');const label=document.getElementById('thinkingToggleLabel');if(checkbox&&label){checkbox.checked=false;label.classList.remove('checked')}}handleThinkingToggle(e){const checkbox=e.target;const label=checkbox.closest('.thinking-toggle-label');if(checkbox.checked){label.classList.add('checked');this.showNotification('✨ 已启用深度思考功能，回答质量将更高但可能需要更多时间','success',3000)}else{label.classList.remove('checked');this.showNotification('⚡ 已关闭深度思考功能，将使用快速响应模式','info',2000)}}async compressImageIfNeeded(file){const TWO_MB=2*1024*1024;try{const name=file.name||'image';const ext=name.split('.').pop().toLowerCase();const isImage=(file.type&&file.type.startsWith('image/'))||['jpg','jpeg','png','gif','webp','heic','heif'].includes(ext);if(!isImage||file.size<=TWO_MB){return file}if((file.type&&(file.type.includes('heic')||file.type.includes('heif')))||ext==='heic'||ext==='heif'){if(window.heic2any){try{const converted=await window.heic2any({blob:file,toType:'image/jpeg',quality:0.8});const jpegBlob=Array.isArray(converted)?converted[0]:converted;return new File([jpegBlob],name.replace(/\.[^\.]+$/,'.jpg'),{type:'image/jpeg'})}catch(e){console.warn('HEIC转换失败，使用原文件',e)}}else{console.warn('HEIC转换库未加载，使用原文件')}}const dataUrl=await new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=()=>resolve(reader.result);reader.onerror=reject;reader.readAsDataURL(file)});const img=await new Promise((resolve,reject)=>{const image=new Image();image.onload=()=>resolve(image);image.onerror=reject;image.src=dataUrl});const canvas=document.createElement('canvas');const ctx=canvas.getContext('2d');let w=img.naturalWidth||img.width;let h=img.naturalHeight||img.height;let scale=1;const fileSizeMB=file.size/(1024*1024);if(fileSizeMB>8){scale=0.5}else if(fileSizeMB>5){scale=0.6}else if(fileSizeMB>3){scale=0.7}else{scale=0.8}const newW=Math.floor(w*scale);const newH=Math.floor(h*scale);canvas.width=newW;canvas.height=newH;const isPng=(file.type==='image/png')||ext==='png';if(isPng){ctx.fillStyle='#ffffff';ctx.fillRect(0,0,newW,newH)}ctx.drawImage(img,0,0,newW,newH);let quality=0.8;if(fileSizeMB>8){quality=0.6}else if(fileSizeMB>5){quality=0.7}const blob=await new Promise(resolve=>canvas.toBlob(resolve,'image/jpeg',quality));if(!blob){return file}if(blob.size>=file.size){console.info('压缩后文件更大，使用原文件',{originalBytes:file.size,compressedBytes:blob.size,originalName:name});return file}const newName=name.replace(/\.[^\.]+$/,'.jpg');const newFile=new File([blob],newName,{type:'image/jpeg'});console.info('压缩完成',{originalBytes:file.size,compressedBytes:newFile.size,compressionRatio:((file.size-newFile.size)/file.size*100).toFixed(1)+'%',originalSize:`${(file.size/(1024*1024)).toFixed(2)}MB`,compressedSize:`${(newFile.size/(1024*1024)).toFixed(2)}MB`,originalName:name,newName,scale:`${(scale*100).toFixed(0)}%`,quality:quality});return newFile}catch(err){console.warn('压缩失败，使用原文件',err);return file}}setUploadProgress(percent){const sendBtn=document.getElementById('sendBtn');if(!sendBtn)return;if(percent===null||percent===undefined){sendBtn.classList.remove('uploading');sendBtn.innerHTML='<i class="fas fa-paper-plane"></i>';return}sendBtn.classList.add('uploading');const pct=Math.max(0,Math.min(100,Math.round(percent)));sendBtn.innerHTML=`<span class="progress-text">${pct}%</span>`}async uploadToS4(file,category='images'){console.group('S4直传');console.debug('准备上传文件',{name:file.name,type:file.type,size:file.size,category});const presignPayload={filename:file.name||'upload.jpg',content_type:file.type||'application/octet-stream',category};console.debug('请求预签名 payload',presignPayload);const presign=await this.apiCall('/s4/presign',{method:'POST',body:presignPayload});console.debug('预签名返回',presign);if(!presign||!presign.success){console.error('S4 预签名失败',presign);console.groupEnd('S4直传');throw new Error((presign&&presign.error)||'S4 预签名失败');}const formData=new FormData();Object.entries(presign.fields).forEach(([k,v])=>formData.append(k,v));formData.append('file',file);console.debug('POST 目标',presign.url);console.debug('POST 字段',presign.fields);const respStatus=await new Promise((resolve,reject)=>{try{const xhr=new XMLHttpRequest();xhr.open('POST',presign.url,true);xhr.onload=()=>{resolve({status:xhr.status,ok:xhr.status===201||(xhr.status>=200&&xhr.status<300),text:xhr.responseText})};xhr.onerror=()=>reject(new Error('S4 网络错误'));xhr.upload.onprogress=(e)=>{if(e.lengthComputable){const percent=(e.loaded/e.total)*100;this.setUploadProgress(percent)}};xhr.send(formData)}catch(err){reject(err)}});console.debug('S4 响应状态',respStatus.status,respStatus.ok);console.debug('S4 响应文本',(respStatus.text||'').slice(0,500));this.setUploadProgress(null);if(!respStatus.ok){console.error('S4 上传失败',{status:respStatus.status,ok:respStatus.ok});console.groupEnd('S4直传');throw new Error('S4 上传失败');}const publicUrl=presign.public_url_cdn||presign.public_url_hosted||presign.public_url;const att={name:file.name,path:null,url:publicUrl,size:file.size,type:file.type||'image/jpeg',category,source:'s4',key:presign.key,bucket:presign.bucket};console.info('S4 上传成功，附件对象',att);console.groupEnd('S4直传');return att}async handleFileUpload(e){const files=Array.from(e.target.files);for(const file of files){try{const maxSize=10*1024*1024;if(file.size>maxSize){this.showNotification(`文件"${file.name}"过大，最大支持10MB`,'error');continue}const allowedTypes=['jpg','jpeg','png','gif','webp','heic','heif','pdf','doc','docx','ppt','pptx','txt','rtf','mp4','avi','mov'];const extension=file.name.split('.').pop().toLowerCase();if(!allowedTypes.includes(extension)){this.showNotification(`不支持的文件类型:${extension}`,'error');continue}const uploadFile=((file.type&&file.type.startsWith('image/'))||['jpg','jpeg','png','gif','webp','heic','heif'].includes(extension))?await this.compressImageIfNeeded(file):file;try{const imageExts=['jpg','jpeg','png','gif','webp','heic','heif'];const videoExts=['mp4','avi','mov','wmv','flv'];const docExts=['pdf','doc','docx','ppt','pptx','txt','rtf'];const isImageType=((uploadFile.type&&uploadFile.type.startsWith('image/'))||imageExts.includes(extension));const category=isImageType?'images':(videoExts.includes(extension)?'videos':'documents');const attachment=await this.uploadToS4(uploadFile,category);console.info('选择文件：S4上传成功',attachment);this.attachments.push(attachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅文件已上传到OSS`,'success')}catch(err){console.error('选择文件：S4上传失败，回退到本地',err);const formData=new FormData();formData.append('file',uploadFile);try{const response=await fetch('api/upload',{method:'POST',body:formData});const result=await response.json();if(result.success){const localAttachment={...result.file,source:'local'};console.info('选择文件：回退本地上传成功',localAttachment);this.attachments.push(localAttachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅文件上传成功`,'success')}else{console.error('选择文件：回退本地上传失败',result);this.showNotification(`❌文件上传失败:${result.message||result.error}`,'error')}}catch(e2){this.showNotification(`❌文件上传失败:${e2.message}`,'error')}}}catch(error){this.showNotification(`文件上传失败:${error.message}`,'error')}}e.target.value=''}updateAttachmentPreview(){const preview=document.getElementById('attachmentPreview');if(this.attachments.length===0){preview.style.display='none';preview.innerHTML='';return}preview.style.display='flex';preview.innerHTML='';this.attachments.forEach((attachment,index)=>{const item=document.createElement('div');const isImage=attachment.category==='images';item.className=isImage?'attachment-item image-attachment-preview':'attachment-item';const icon=this.getFileIcon(attachment.category);if(isImage){item.innerHTML=`<i class="${icon}"></i><span class="attachment-name"onclick="app.showImagePreview('${attachment.url}', '${attachment.name}')"style="cursor: pointer;">${attachment.name}</span><i class="fas fa-eye preview-icon-small"onclick="app.showImagePreview('${attachment.url}', '${attachment.name}')"style="cursor: pointer;"title="预览图片"></i><button class="attachment-remove"onclick="app.removeAttachment(${index})">&times;</button>`}else{item.innerHTML=`<i class="${icon}"></i><span>${attachment.name}</span><button class="attachment-remove"onclick="app.removeAttachment(${index})">&times;</button>`}preview.appendChild(item)});this.updateSendButton()}async removeAttachment(index){const attachment=this.attachments[index];if(attachment&&attachment.source==='s4'&&attachment.key){try{const resp=await this.apiCall('/s4/delete',{method:'POST',body:{key:attachment.key}});if(resp&&resp.success){this.showNotification('✅ 已从OSS删除该文件','success')}else{this.showNotification(`⚠️OSS删除失败：${resp.error||'未知错误'}`,'warning')}}catch(err){this.showNotification(`❌OSS删除失败：${err.message}`,'error')}}this.attachments.splice(index,1);this.updateAttachmentPreview();this.updateSendButton()}getFileIcon(category){const icons={'images':'fas fa-image','videos':'fas fa-video','documents':'fas fa-file-alt'};return icons[category]||'fas fa-file'}async searchSessions(keyword){if(!keyword.trim()){this.loadSessions();return}try{const response=await this.apiCall(`/chat/search?keyword=${encodeURIComponent(keyword)}`);if(response.success){const sessions=response.messages.reduce((acc,message)=>{const existingSession=acc.find(s=>s.id===message.session_id);if(!existingSession){acc.push({id:message.session_id,title:message.session_title,last_message:message.content,updated_at:message.created_at})}return acc},[]);this.renderSessions(sessions)}}catch(error){this.showNotification('搜索失败','error')}}switchAdminTab(e){const tab=e.target.dataset.tab;document.querySelectorAll('.admin-tab-btn').forEach(btn=>{btn.classList.remove('active')});e.target.classList.add('active');document.querySelectorAll('.admin-tab-content').forEach(content=>{content.classList.remove('active')});document.getElementById(`${tab}Tab`).classList.add('active');this.loadAdminTabData(tab)}async loadAdminData(){await this.loadAdminTabData('dashboard')}async loadAdminTabData(tab){switch(tab){case'dashboard':await this.loadDashboardStats();break;case'api-keys':await this.loadApiKeys();break;case'users':await this.loadUsers();break;case'sessions':await this.loadSessionsAdmin();break;case'settings':await this.loadSystemSettings();break;case'logs':await this.loadLogs();break}}async loadDashboardStats(){try{const response=await this.apiCall('/admin/stats');if(response.success){const stats=response.stats;document.getElementById('totalUsers').textContent=stats.total_users||0;document.getElementById('totalCalls').textContent=stats.total_calls||0;document.getElementById('todayCalls').textContent=stats.today_calls||0;document.getElementById('avgResponseTime').textContent=stats.avg_response_time?`${Math.round(stats.avg_response_time*1000)}ms`:'0ms'}}catch(error){this.showNotification('加载统计数据失败','error')}}async loadApiKeys(){try{const response=await this.apiCall('/admin/api-keys');if(response.success){this.renderApiKeys(response.api_keys)}}catch(error){this.showNotification('加载API密钥失败','error')}}renderApiKeys(apiKeys){const tbody=document.querySelector('#apiKeysTable tbody');tbody.innerHTML='';apiKeys.forEach(key=>{const row=document.createElement('tr');row.innerHTML=`<td>${key.name}</td><td>${key.api_key.substring(0,20)}...</td><td><span class="status-badge ${key.is_active ? 'active' : 'inactive'}">${key.is_active?'启用':'禁用'}</span></td><td>${key.pro_rate_limit||10}/分钟</td><td>${key.usage_count||0}</td><td>${key.last_used?this.formatTime(key.last_used):'从未使用'}</td><td><button class="btn-icon"onclick="app.editApiKey(${key.id})"title="编辑"><i class="fas fa-edit"></i></button><button class="btn-icon"onclick="app.deleteApiKey(${key.id})"title="删除"><i class="fas fa-trash"></i></button></td>`;tbody.appendChild(row)})}async loadUsers(){try{const response=await this.apiCall('/admin/users');if(response.success){this.renderUsers(response.users)}}catch(error){this.showNotification('加载用户列表失败','error')}}renderUsers(users){const tbody=document.querySelector('#usersTable tbody');tbody.innerHTML='';users.forEach(user=>{const row=document.createElement('tr');row.innerHTML=`<td>${user.username}</td><td>${user.email||'未设置'}</td><td><span class="status-badge ${user.is_admin ? 'active' : 'inactive'}">${user.is_admin?'是':'否'}</span></td><td><span class="status-badge ${user.can_use_pro ? 'active' : 'inactive'}">${user.can_use_pro?'是':'否'}</span></td><td>${this.formatTime(user.created_at)}</td><td><button class="btn-icon"onclick="app.editUser(${user.id})"title="编辑用户"><i class="fas fa-edit"></i></button><button class="btn-icon"onclick="app.toggleUserAdmin(${user.id})"title="切换管理员状态"><i class="fas fa-user-shield"></i></button><button class="btn-icon"onclick="app.toggleUserPro(${user.id})"title="切换Pro访问权限"><i class="fas fa-star"></i></button><button class="btn-icon"onclick="app.deleteUser(${user.id})"title="删除用户"><i class="fas fa-trash"></i></button></td>`;tbody.appendChild(row)})}async loadLogs(){try{const response=await this.apiCall('/admin/logs');if(response.success){this.renderLogs(response.logs)}}catch(error){this.showNotification('加载日志失败','error')}}renderLogs(logs){const tbody=document.querySelector('#logsTable tbody');tbody.innerHTML='';if(!logs||logs.length===0){tbody.innerHTML='<tr><td colspan="7" style="text-align: center; padding: 40px; color: var(--text-muted);">暂无调用日志</td></tr>';return}logs.forEach(log=>{const row=document.createElement('tr');row.innerHTML=`<td>${this.formatTime(log.created_at)}</td><td>${log.api_key_name||'未知密钥'}</td><td>${log.username||'未知用户'}</td><td>${log.model}</td><td>${log.total_tokens||0}</td><td>${Math.round(log.response_time*1000)}ms</td><td><span class="badge ${log.status === 'success' ? 'success' : 'error'}">${log.status==='success'?'成功':'失败'}</span></td>`;tbody.appendChild(row)})}async clearLogs(){if(!confirm('确定要清空所有 API 调用日志吗？此操作不可恢复！')){return}try{const response=await this.apiCall('/admin/logs',{method:'DELETE'});if(response.success){this.showNotification('日志已清空','success');await this.loadLogs()}else{this.showNotification(response.message||'清空日志失败','error')}}catch(error){this.showNotification('清空日志失败: '+error.message,'error')}}async loadSessionsAdmin(){this.sessionsPagination={currentPage:1,limit:20,offset:0};this.sessionsSearchKeyword='';await this.loadSessionsAdminWithPagination()}renderSessionsAdmin(sessions){const tbody=document.querySelector('#sessionsTable tbody');if(!tbody)return;tbody.innerHTML='';sessions.forEach(session=>{const row=document.createElement('tr');row.innerHTML=`<td>${session.id}</td><td>${session.username||'未知用户'}</td><td>${session.title||'无标题'}</td><td>${session.message_count||0}</td><td>${session.last_message?this.truncateText(session.last_message,50):'无消息'}</td><td>${this.formatTime(session.created_at)}</td><td>${this.formatTime(session.updated_at)}</td><td><button class="btn-small btn-primary"onclick="app.showSessionDetail(${session.id})"><i class="fas fa-eye"></i>查看</button><button class="btn-small btn-danger"onclick="app.deleteSessionAdmin(${session.id})"><i class="fas fa-trash"></i>删除</button></td>`;tbody.appendChild(row)})}updateSessionsPagination(total,limit,offset){const currentPage=Math.floor(offset/limit)+1;const totalPages=Math.ceil(total/limit);if(this.sessionsPagination){this.sessionsPagination.currentPage=currentPage;this.sessionsPagination.totalPages=totalPages}const pageInfo=document.getElementById('sessionsPageInfo');const prevBtn=document.getElementById('prevSessionsPage');const nextBtn=document.getElementById('nextSessionsPage');if(pageInfo){pageInfo.textContent=`第${currentPage}页，共${totalPages}页`}if(prevBtn){prevBtn.disabled=currentPage<=1}if(nextBtn){nextBtn.disabled=currentPage>=totalPages}}async showSessionDetail(sessionId){try{const response=await this.apiCall(`/admin/session?session_id=${sessionId}`);if(response.success){this.displaySessionDetail(response.session,response.messages)}else{this.showNotification('获取会话详情失败','error')}}catch(error){this.showNotification('获取会话详情失败: '+error.message,'error')}}displaySessionDetail(session,messages){document.getElementById('modalSessionId').textContent=session.id;document.getElementById('modalSessionUser').textContent=session.username||'未知用户';document.getElementById('modalSessionTitle').textContent=session.title||'无标题';document.getElementById('modalSessionMessageCount').textContent=messages.length;document.getElementById('modalSessionCreated').textContent=this.formatTime(session.created_at);const messagesList=document.getElementById('modalMessagesList');messagesList.innerHTML='';messages.forEach(message=>{const messageDiv=document.createElement('div');messageDiv.className=`message-item ${message.role}`;const roleText=message.role==='user'?'用户':'AI';const timeText=this.formatTime(message.created_at);messageDiv.innerHTML=`<div class="message-header"><span class="message-role">${roleText}</span><span class="message-time">${timeText}</span></div><div class="message-content">${this.formatMessageContent(message.content)}</div>`;messagesList.appendChild(messageDiv)});const deleteBtn=document.getElementById('deleteSessionBtn');deleteBtn.onclick=()=>this.deleteSessionAdmin(session.id);document.getElementById('sessionDetailModal').style.display='flex'}async deleteSessionAdmin(sessionId){if(!confirm('确定要删除这个会话吗？此操作不可恢复！')){return}try{const response=await this.apiCall(`/admin/session?session_id=${sessionId}`,{method:'DELETE'});if(response.success){this.showNotification('会话删除成功','success');document.getElementById('sessionDetailModal').style.display='none';await this.loadSessionsAdmin()}else{this.showNotification(response.error||'删除会话失败','error')}}catch(error){this.showNotification('删除会话失败: '+error.message,'error')}}truncateText(text,maxLength){if(!text)return'';return text.length>maxLength?text.substring(0,maxLength)+'...':text}formatMessageContent(content){if(!content)return'';return content.replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\n/g,'<br>')}formatLastLoginTime(lastLoginTime){if(!lastLoginTime)return'首次登录';try{const lastLogin=new Date(lastLoginTime);const now=new Date();const diff=now-lastLogin;if(isNaN(lastLogin.getTime())||diff<0){return'首次登录'}const days=Math.floor(diff/(1000*60*60*24));const hours=Math.floor(diff/(1000*60*60));const minutes=Math.floor(diff/(1000*60));if(days>0){return`${days}天前(${lastLogin.toLocaleString('zh-CN')})`}else if(hours>0){return`${hours}小时前(${lastLogin.toLocaleString('zh-CN')})`}else if(minutes>0){return`${minutes}分钟前(${lastLogin.toLocaleString('zh-CN')})`}else{return'刚刚 (本次登录)'}}catch(error){console.warn('格式化登录时间失败:',error);return'首次登录'}}changeSessionsPage(direction){if(!this.sessionsPagination){this.sessionsPagination={currentPage:1,limit:20,offset:0}}const newOffset=this.sessionsPagination.offset+(direction*this.sessionsPagination.limit);if(newOffset>=0){this.sessionsPagination.offset=newOffset;this.loadSessionsAdminWithPagination()}}async loadSessionsAdminWithPagination(){try{const params=new URLSearchParams({limit:this.sessionsPagination.limit,offset:this.sessionsPagination.offset});if(this.sessionsSearchKeyword){params.append('search',this.sessionsSearchKeyword)}const response=await this.apiCall(`/admin/sessions?${params}`);if(response.success){this.renderSessionsAdmin(response.sessions);this.updateSessionsPagination(response.total,response.limit,response.offset)}else{this.showNotification('加载会话列表失败','error')}}catch(error){this.showNotification('加载会话列表失败: '+error.message,'error')}}async searchSessionsAdmin(keyword){this.sessionsSearchKeyword=keyword;this.sessionsPagination={currentPage:1,limit:20,offset:0};await this.loadSessionsAdminWithPagination()}formatTime(timestamp){let date;if(typeof timestamp==='string'){date=new Date(timestamp);if(isNaN(date.getTime())){const numTimestamp=parseInt(timestamp);if(!isNaN(numTimestamp)){date=new Date(numTimestamp<10000000000?numTimestamp*1000:numTimestamp)}else{console.warn('时间戳格式无效:',timestamp);return'时间无效'}}}else if(typeof timestamp==='number'){date=new Date(timestamp<10000000000?timestamp*1000:timestamp)}else{console.warn('时间戳类型无效:',typeof timestamp,timestamp);return'时间无效'}if(isNaN(date.getTime())){console.warn('解析后的日期无效:',timestamp);return'时间无效'}const now=new Date();const diff=now-date;if(diff<0){if(Math.abs(diff)<3600000){const absDiff=Math.abs(diff);if(absDiff<60000){return'刚刚'}else if(absDiff<3600000){return`${Math.floor(absDiff/60000)}分钟前`}}return date.toLocaleString('zh-CN')}if(diff<60000){return'刚刚'}else if(diff<3600000){return`${Math.floor(diff/60000)}分钟前`}else if(diff<86400000){return`${Math.floor(diff/3600000)}小时前`}else{return date.toLocaleDateString('zh-CN',{year:'numeric',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'})}}scrollToBottom(){const chatMessages=document.getElementById('chatMessages');chatMessages.scrollTop=chatMessages.scrollHeight}autoResizeTextarea(){const textarea=document.getElementById('messageInput');textarea.addEventListener('input',function(){this.style.height='auto';this.style.height=Math.min(this.scrollHeight,120)+'px'})}initPasteAndDrop(){const chatMessages=document.getElementById('chatMessages');const messageInput=document.getElementById('messageInput');const inputWrapper=document.querySelector('.input-wrapper');const chatInputContainer=document.querySelector('.chat-input-container');messageInput.addEventListener('paste',(e)=>this.handlePaste(e));chatMessages.addEventListener('paste',(e)=>this.handlePaste(e));const dropZones=[chatMessages,chatInputContainer,inputWrapper];dropZones.forEach(zone=>{['dragenter','dragover','dragleave','drop'].forEach(eventName=>{zone.addEventListener(eventName,(e)=>{e.preventDefault();e.stopPropagation()},false)});zone.addEventListener('dragenter',(e)=>{zone.classList.add('drag-over')});zone.addEventListener('dragover',(e)=>{zone.classList.add('drag-over')});zone.addEventListener('dragleave',(e)=>{if(e.target===zone){zone.classList.remove('drag-over')}});zone.addEventListener('drop',(e)=>{zone.classList.remove('drag-over');this.handleDrop(e)})});window.addEventListener('dragover',(e)=>{e.preventDefault()},false);window.addEventListener('drop',(e)=>{e.preventDefault()},false)}handlePaste(e){const items=e.clipboardData?.items;if(!items)return;let hasImage=false;for(let i=0;i<items.length;i++){const item=items[i];if(item.type.indexOf('image')!==-1){hasImage=true;e.preventDefault();const blob=item.getAsFile();if(blob){this.uploadPastedImage(blob)}break}}if(hasImage){this.showNotification('📋 正在上传粘贴的图片...','info')}}handleDrop(e){const files=e.dataTransfer?.files;if(!files||files.length===0)return;this.showNotification(`📤正在上传${files.length}个文件...`,'info');Array.from(files).forEach(file=>{this.uploadDroppedFile(file)})}async uploadPastedImage(blob){const timestamp=new Date().getTime();const fileName=`pasted-image-${timestamp}.png`;const file=new File([blob],fileName,{type:blob.type});const maxSize=10*1024*1024;if(file.size>maxSize){this.showNotification('❌ 图片过大，最大支持 10MB','error');return}const uploadFile=await this.compressImageIfNeeded(file);try{const attachment=await this.uploadToS4(uploadFile,'images');console.info('粘贴图片：S4上传成功',attachment);this.attachments.push(attachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅图片已上传到OSS`,'success')}catch(err){const formData=new FormData();formData.append('file',uploadFile);try{const response=await fetch('api/upload',{method:'POST',body:formData});const result=await response.json();if(result.success){const localAttachment={...result.file,source:'local'};console.info('粘贴图片：回退本地上传成功',localAttachment);this.attachments.push(localAttachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅图片上传成功`,'success')}else{console.error('粘贴图片：回退本地上传失败',result);this.showNotification(`❌图片上传失败:${result.message||result.error}`,'error')}}catch(error){console.error('粘贴图片：本地上传异常',error);this.showNotification(`❌图片上传失败:${error.message}`,'error')}}}async uploadDroppedFile(file){const maxSize=10*1024*1024;if(file.size>maxSize){this.showNotification(`❌文件"${file.name}"过大，最大支持10MB`,'error');return}const allowedTypes=['jpg','jpeg','png','gif','webp','heic','heif','pdf','doc','docx','ppt','pptx','txt','rtf','mp4','avi','mov'];const extension=file.name.split('.').pop().toLowerCase();if(!allowedTypes.includes(extension)){this.showNotification(`❌不支持的文件类型:${extension}`,'error');return}const uploadFile=((file.type&&file.type.startsWith('image/'))||['jpg','jpeg','png','gif','webp','heic','heif'].includes(extension))?await this.compressImageIfNeeded(file):file;try{const imageExts=['jpg','jpeg','png','gif','webp','heic','heif'];const videoExts=['mp4','avi','mov','wmv','flv'];const docExts=['pdf','doc','docx','ppt','pptx','txt','rtf'];const isImageType=((uploadFile.type&&uploadFile.type.startsWith('image/'))||imageExts.includes(extension));const category=isImageType?'images':(videoExts.includes(extension)?'videos':'documents');const attachment=await this.uploadToS4(uploadFile,category);console.info('拖拽文件：S4上传成功',attachment);this.attachments.push(attachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅文件已上传到OSS`,'success')}catch(error){console.error('拖拽文件：S4上传失败，回退到本地',error);const formData=new FormData();formData.append('file',uploadFile);try{const response=await fetch('api/upload',{method:'POST',body:formData});const result=await response.json();if(result.success){const localAttachment={...result.file,source:'local'};console.info('拖拽文件：回退本地上传成功',localAttachment);this.attachments.push(localAttachment);console.table(this.attachments);this.updateAttachmentPreview();this.showNotification(`✅文件上传成功`,'success')}else{this.showNotification(`❌文件上传失败:${result.message||result.error}`,'error')}}catch(e2){this.showNotification(`❌文件上传失败:${e2.message}`,'error')}}}showModal(content){document.getElementById('modalBody').innerHTML=content;document.getElementById('modal').style.display='block'}closeModal(){document.getElementById('modal').style.display='none'}async editApiKey(id){try{const response=await this.apiCall('/admin/api-keys');if(response.success){const apiKey=response.api_keys.find(key=>key.id==id);if(apiKey){this.showEditApiKeyModal(apiKey)}else{this.showNotification('API密钥不存在','error')}}}catch(error){this.showNotification('获取API密钥信息失败','error')}}showEditApiKeyModal(apiKey){const modalContent=`<h3>编辑API密钥</h3><form id="editApiKeyForm"><div class="form-group"><label for="editApiKeyName">名称:</label><input type="text"id="editApiKeyName"value="${apiKey.name}"required></div><div class="form-group"><label for="editApiKeyValue">API密钥:</label><input type="text"id="editApiKeyValue"value="${apiKey.api_key}"required></div><div class="form-group"><label for="editApiKeyProLimit">Pro限制(每分钟):</label><input type="number"id="editApiKeyProLimit"value="${apiKey.pro_rate_limit || 10}"min="1"max="100"required></div><div class="checkbox-group"><label><input type="checkbox"id="editApiKeyActive"${apiKey.is_active?'checked':''}>启用此API密钥</label></div><div class="form-actions"><button type="submit"class="btn-primary">更新</button><button type="button"class="btn-secondary"onclick="app.closeModal()">取消</button></div></form>`;this.showModal(modalContent);document.getElementById('editApiKeyForm').addEventListener('submit',(e)=>{e.preventDefault();this.updateApiKey(apiKey.id)})}async updateApiKey(id){const name=document.getElementById('editApiKeyName').value.trim();const apiKey=document.getElementById('editApiKeyValue').value.trim();const proLimit=parseInt(document.getElementById('editApiKeyProLimit').value);const isActive=document.getElementById('editApiKeyActive').checked;if(!name||!apiKey){this.showNotification('请填写所有必填字段','error');return}try{const response=await this.apiCall('/admin/api-keys',{method:'PUT',body:{id:id,name:name,api_key:apiKey,pro_rate_limit:proLimit,is_active:isActive?1:0}});if(response.success){this.showNotification('API密钥更新成功','success');this.closeModal();this.loadApiKeys()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async deleteApiKey(id){if(!confirm('确定要删除这个API密钥吗？'))return;try{const response=await this.apiCall('/admin/api-keys',{method:'DELETE',body:{id}});if(response.success){this.showNotification('API密钥删除成功','success');this.loadApiKeys()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async toggleUserAdmin(userId){try{const response=await this.apiCall('/admin/user/toggle-admin',{method:'POST',body:{user_id:userId}});if(response.success){this.showNotification('用户状态更新成功','success');this.loadUsers()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async deleteUser(userId){if(!confirm('确定要删除这个用户吗？'))return;try{const response=await this.apiCall('/admin/users',{method:'DELETE',body:{user_id:userId}});if(response.success){this.showNotification('用户删除成功','success');this.loadUsers()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async loadSystemSettings(){try{const response=await this.apiCall('/admin/settings');if(response.success){this.renderSystemSettings(response.settings)}}catch(error){this.showNotification('加载系统设置失败','error')}}renderSystemSettings(settings){const registrationToggle=document.getElementById('registrationToggle');const defaultProToggle=document.getElementById('defaultProToggle');registrationToggle.checked=settings.registration_enabled==='1';defaultProToggle.checked=settings.default_pro_access==='1';registrationToggle.onchange=()=>this.updateRegistrationSetting(registrationToggle.checked);defaultProToggle.onchange=()=>this.updateDefaultProSetting(defaultProToggle.checked)}async updateRegistrationSetting(enabled){try{const response=await this.apiCall('/admin/settings/registration',{method:'POST',body:{enabled}});if(response.success){this.showNotification('注册设置更新成功','success')}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async updateDefaultProSetting(enabled){try{const response=await this.apiCall('/admin/settings',{method:'POST',body:{setting_key:'default_pro_access',setting_value:enabled?'1':'0',description:'新用户默认Pro访问权限'}});if(response.success){this.showNotification('默认Pro设置更新成功','success')}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async editUser(userId){try{const response=await this.apiCall('/admin/users');if(response.success){const user=response.users.find(u=>u.id===userId);if(user){this.showEditUserModal(user)}}}catch(error){this.showNotification('获取用户信息失败','error')}}showEditUserModal(user){const modalContent=`<h2>编辑用户</h2><form id="editUserForm"><div class="form-group"><label for="editUsername">用户名</label><input type="text"id="editUsername"value="${user.username}"required></div><div class="form-group"><label for="editEmail">邮箱</label><input type="email"id="editEmail"value="${user.email || ''}"></div><div class="form-group"><label for="editPassword">新密码（留空则不修改）</label><input type="password"id="editPassword"></div><div class="checkbox-group"><input type="checkbox"id="editIsAdmin"${user.is_admin?'checked':''}><label for="editIsAdmin">管理员权限</label></div><div class="checkbox-group"><input type="checkbox"id="editCanUsePro"${user.can_use_pro?'checked':''}><label for="editCanUsePro">Pro访问权限</label></div><div style="margin-top: 20px; text-align: right;"><button type="button"class="btn-secondary"onclick="app.closeModal()">取消</button><button type="submit"class="btn-primary">保存</button></div></form>`;this.showModal(modalContent);document.getElementById('editUserForm').onsubmit=(e)=>{e.preventDefault();this.updateUser(user.id)}}async updateUser(userId){const username=document.getElementById('editUsername').value;const email=document.getElementById('editEmail').value;const password=document.getElementById('editPassword').value;const isAdmin=document.getElementById('editIsAdmin').checked;const canUsePro=document.getElementById('editCanUsePro').checked;try{const body={user_id:userId,username,email,is_admin:isAdmin,can_use_pro:canUsePro};if(password){body.password=password}const response=await this.apiCall('/admin/user/update',{method:'POST',body});if(response.success){this.showNotification('用户更新成功','success');this.closeModal();this.loadUsers()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}async toggleUserPro(userId){try{const response=await this.apiCall('/admin/user/toggle-pro',{method:'POST',body:{user_id:userId}});if(response.success){this.showNotification('Pro访问权限更新成功','success');this.loadUsers()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}showAddUserModal(){const modalContent=`<h2>添加用户</h2><form id="addUserForm"><div class="form-group"><label for="newUsername">用户名</label><input type="text"id="newUsername"required></div><div class="form-group"><label for="newEmail">邮箱</label><input type="email"id="newEmail"></div><div class="form-group"><label for="newPassword">密码</label><input type="password"id="newPassword"required></div><div class="checkbox-group"><input type="checkbox"id="newIsAdmin"><label for="newIsAdmin">管理员权限</label></div><div class="checkbox-group"><input type="checkbox"id="newCanUsePro"><label for="newCanUsePro">Pro访问权限</label></div><div style="margin-top: 20px; text-align: right;"><button type="button"class="btn-secondary"onclick="app.closeModal()">取消</button><button type="submit"class="btn-primary">创建</button></div></form>`;this.showModal(modalContent);document.getElementById('addUserForm').onsubmit=(e)=>{e.preventDefault();this.createUser()}}async createUser(){const username=document.getElementById('newUsername').value;const email=document.getElementById('newEmail').value;const password=document.getElementById('newPassword').value;const isAdmin=document.getElementById('newIsAdmin').checked;const canUsePro=document.getElementById('newCanUsePro').checked;try{const response=await this.apiCall('/admin/user/create',{method:'POST',body:{username,email,password,is_admin:isAdmin,can_use_pro:canUsePro}});if(response.success){this.showNotification('用户创建成功','success');this.closeModal();this.loadUsers()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}showAddApiKeyModal(){const modalContent=`<h2>添加API密钥</h2><form id="addApiKeyForm"><div class="form-group"><label for="newKeyName">密钥名称</label><input type="text"id="newKeyName"required></div><div class="form-group"><label for="newApiKey">API密钥</label><input type="text"id="newApiKey"required></div><div class="form-group"><label for="newKeyProLimit">Pro限制(每分钟)</label><input type="number"id="newKeyProLimit"value="10"min="1"max="100"required></div><div class="checkbox-group"><label><input type="checkbox"id="newKeyActive"checked>启用此API密钥</label></div><div class="form-actions"><button type="button"class="btn-secondary"onclick="app.closeModal()">取消</button><button type="submit"class="btn-primary">添加</button></div></form>`;this.showModal(modalContent);document.getElementById('addApiKeyForm').onsubmit=(e)=>{e.preventDefault();this.createApiKey()}}async createApiKey(){const name=document.getElementById('newKeyName').value.trim();const apiKey=document.getElementById('newApiKey').value.trim();const proLimit=parseInt(document.getElementById('newKeyProLimit').value);const isActive=document.getElementById('newKeyActive').checked;if(!name||!apiKey){this.showNotification('请填写所有必填字段','error');return}try{const response=await this.apiCall('/admin/api-keys',{method:'POST',body:{name,api_key:apiKey,pro_rate_limit:proLimit,is_active:isActive?1:0}});if(response.success){this.showNotification('API密钥添加成功','success');this.closeModal();this.loadApiKeys()}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification(error.message,'error')}}showImagePreview(imageUrl,imageName){let previewModal=document.getElementById('imagePreviewModal');if(!previewModal){previewModal=document.createElement('div');previewModal.id='imagePreviewModal';previewModal.className='image-preview-modal';previewModal.innerHTML=`<div class="image-preview-overlay"onclick="app.closeImagePreview()"></div><div class="image-preview-container"><button class="image-preview-close"onclick="app.closeImagePreview()"><i class="fas fa-times"></i></button><div class="image-preview-content"><img id="previewImage"src=""alt=""><div class="image-preview-info"><i class="fas fa-image"></i><span id="previewImageName"></span></div></div><div class="image-preview-actions"><a id="downloadImageBtn"href=""download=""class="btn-icon"title="下载图片"><i class="fas fa-download"></i></a></div></div>`;document.body.appendChild(previewModal);document.addEventListener('keydown',(e)=>{if(e.key==='Escape'&&previewModal.classList.contains('active')){this.closeImagePreview()}})}const previewImage=document.getElementById('previewImage');const previewImageName=document.getElementById('previewImageName');const downloadBtn=document.getElementById('downloadImageBtn');previewImage.src=imageUrl;previewImage.alt=imageName;previewImageName.textContent=imageName;downloadBtn.href=imageUrl;downloadBtn.download=imageName;previewModal.classList.add('active');document.body.style.overflow='hidden';setTimeout(()=>{previewModal.classList.add('loaded')},10)}closeImagePreview(){const previewModal=document.getElementById('imagePreviewModal');if(previewModal){previewModal.classList.remove('loaded');setTimeout(()=>{previewModal.classList.remove('active');document.body.style.overflow=''},300)}}async deleteSession(sessionId){if(!confirm('确定要删除这个对话吗？删除后无法恢复。')){return}const sessionItem=document.querySelector(`[data-session-id="${sessionId}"]`);if(sessionItem){sessionItem.style.opacity='0.5';sessionItem.style.pointerEvents='none';const actionsDiv=sessionItem.querySelector('.session-item-actions');if(actionsDiv){actionsDiv.innerHTML='<div class="session-loading"><i class="fas fa-spinner fa-spin"></i></div>'}}if(this.currentSession&&this.currentSession.id==sessionId){this.currentSession=null;document.getElementById('currentSessionTitle').textContent='选择或创建新对话';document.getElementById('editTitleBtn').style.display='none';document.getElementById('chatMessages').innerHTML=`<div class="welcome-message"><div class="welcome-icon"><i class="fas fa-robot"></i></div><h3>欢迎使用WawaCloud AI聊天助手</h3><p>我是娃娃团队旗下基于googleGemini训练开发的Ai助手</p><p>我可以帮助您解答问题、分析图片、处理文档等。开始新对话吧！</p><div class="feature-list"><div class="feature-item"><i class="fas fa-image"></i><span>图片分析</span></div><div class="feature-item"><i class="fas fa-search"></i><span>网络搜索</span></div><div class="feature-item"><i class="fas fa-brain"></i><span>智能推理</span></div><div class="feature-item"><i class="fas fa-file-alt"></i><span>文档处理</span></div></div></div>`}try{const response=await this.apiCall('/chat/sessions',{method:'DELETE',body:{session_id:sessionId}});if(response.success){this.showNotification('对话删除成功','success');if(sessionItem){sessionItem.style.transform='translateX(-100%)';setTimeout(()=>{sessionItem.remove()},300)}}else{if(sessionItem){sessionItem.style.opacity='1';sessionItem.style.pointerEvents='auto';const actionsDiv=sessionItem.querySelector('.session-item-actions');if(actionsDiv){actionsDiv.innerHTML=`<button class="session-delete-btn"onclick="event.stopPropagation(); app.deleteSession(${sessionId});"title="删除"><i class="fas fa-trash"></i></button>`}}this.showNotification(response.message||'删除失败','error')}}catch(error){if(sessionItem){sessionItem.style.opacity='1';sessionItem.style.pointerEvents='auto';const actionsDiv=sessionItem.querySelector('.session-item-actions');if(actionsDiv){actionsDiv.innerHTML=`<button class="session-delete-btn"onclick="event.stopPropagation(); app.deleteSession(${sessionId});"title="删除"><i class="fas fa-trash"></i></button>`}}this.showNotification('删除对话失败','error')}}showAdminProfileModal(){const content=`<div class="modal-header"><h3>修改个人资料</h3><button class="modal-close"onclick="app.closeModal()">&times;</button></div><div class="modal-body"><form id="adminProfileForm"onsubmit="app.updateAdminProfile(event)"><div class="form-group"><label for="adminUsername">用户名</label><input type="text"id="adminUsername"value="${this.currentUser.username}"required></div><div class="form-group"><label for="adminCurrentPassword">当前密码</label><input type="password"id="adminCurrentPassword"required></div><div class="form-group"><label for="adminNewPassword">新密码（留空则不修改）</label><input type="password"id="adminNewPassword"></div><div class="form-group"><label for="adminConfirmPassword">确认新密码</label><input type="password"id="adminConfirmPassword"></div><div class="form-actions"><button type="button"class="btn btn-secondary"onclick="app.closeModal()">取消</button><button type="submit"class="btn btn-primary">保存</button></div></form></div>`;this.showModal(content)}async updateAdminProfile(e){e.preventDefault();const username=document.getElementById('adminUsername').value.trim();const currentPassword=document.getElementById('adminCurrentPassword').value;const newPassword=document.getElementById('adminNewPassword').value;const confirmPassword=document.getElementById('adminConfirmPassword').value;if(!username||!currentPassword){this.showNotification('请填写用户名和当前密码','error');return}if(newPassword&&newPassword!==confirmPassword){this.showNotification('新密码和确认密码不匹配','error');return}try{const response=await this.apiCall('/admin/profile/update',{method:'POST',body:{username,current_password:currentPassword,new_password:newPassword||null}});if(response.success){this.showNotification('个人资料更新成功','success');this.closeModal();this.currentUser.username=username}else{this.showNotification(response.message,'error')}}catch(error){this.showNotification('更新个人资料失败','error')}}initMobileInputAdaptation(){const messageInput=document.getElementById('messageInput');const chatInputContainer=document.querySelector('.chat-input-container');const chatMessages=document.getElementById('chatMessages');if(!messageInput||!chatInputContainer||!chatMessages)return;const isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||window.innerWidth<=768;if(!isMobile)return;let isKeyboardOpen=false;let originalViewportHeight=window.innerHeight;let adaptTimeout=null;let blurTimeout=null;let isSendingMessage=false;const getAdaptationConfig=()=>{const screenHeight=window.innerHeight;if(screenHeight>=900){return{heightThreshold:200,adaptDelay:150,blurDelay:500,focusDelay:400}}else if(screenHeight>=700){return{heightThreshold:150,adaptDelay:100,blurDelay:300,focusDelay:300}}else{return{heightThreshold:100,adaptDelay:50,blurDelay:200,focusDelay:200}}};const handleViewportChange=()=>{if(adaptTimeout){clearTimeout(adaptTimeout)}const config=getAdaptationConfig();adaptTimeout=setTimeout(()=>{const currentHeight=window.innerHeight;const heightDifference=originalViewportHeight-currentHeight;if(heightDifference>config.heightThreshold){if(!isKeyboardOpen){isKeyboardOpen=true;this.adaptToKeyboard(true)}}else{if(isKeyboardOpen){isKeyboardOpen=false;this.adaptToKeyboard(false)}}},config.adaptDelay)};messageInput.addEventListener('focus',()=>{const config=getAdaptationConfig();setTimeout(()=>{handleViewportChange()},config.focusDelay)});messageInput.addEventListener('blur',()=>{if(blurTimeout){clearTimeout(blurTimeout)}const config=getAdaptationConfig();blurTimeout=setTimeout(()=>{if(isSendingMessage){setTimeout(()=>{isKeyboardOpen=false;this.adaptToKeyboard(false)},1000)}else{isKeyboardOpen=false;this.adaptToKeyboard(false)}},config.blurDelay)});const sendBtn=document.getElementById('sendBtn');if(sendBtn){sendBtn.addEventListener('click',()=>{isSendingMessage=true;setTimeout(()=>{isSendingMessage=false},2000)})}messageInput.addEventListener('keydown',(e)=>{if(e.key==='Enter'&&!e.shiftKey){isSendingMessage=true;setTimeout(()=>{isSendingMessage=false},2000)}});window.addEventListener('resize',handleViewportChange);if(window.visualViewport){window.visualViewport.addEventListener('resize',handleViewportChange)}}adaptToKeyboard(isOpen){const chatInputContainer=document.querySelector('.chat-input-container');const chatMessages=document.getElementById('chatMessages');const mainChat=document.querySelector('.main-chat');const chatHeader=document.querySelector('.chat-header-new');if(!chatInputContainer||!chatMessages||!mainChat)return;const screenHeight=window.innerHeight;const isLargeScreen=screenHeight>=900;if(isOpen){chatInputContainer.style.position='fixed';chatInputContainer.style.bottom='0';chatInputContainer.style.left='0';chatInputContainer.style.right='0';chatInputContainer.style.zIndex='1000';const inputHeight=chatInputContainer.offsetHeight;const extraSpace=isLargeScreen?60:40;chatMessages.style.paddingBottom=`calc(${inputHeight+extraSpace}px+env(safe-area-inset-bottom))`;mainChat.style.height='100vh';mainChat.style.maxHeight='100vh';mainChat.style.overflow='hidden';if(chatHeader){chatHeader.style.position='sticky';chatHeader.style.top='0';chatHeader.style.zIndex='10';chatHeader.style.flexShrink='0'}const scrollDelay=isLargeScreen?200:100;setTimeout(()=>{this.scrollToBottom()},scrollDelay)}else{const currentScrollTop=chatMessages.scrollTop;chatInputContainer.style.position='';chatInputContainer.style.bottom='';chatInputContainer.style.left='';chatInputContainer.style.right='';chatInputContainer.style.zIndex='';chatMessages.style.paddingBottom='';chatMessages.style.minHeight='auto';if(isLargeScreen){chatMessages.style.transition='none';chatMessages.offsetHeight;chatMessages.style.transition=''}mainChat.style.height='';mainChat.style.maxHeight='';mainChat.style.overflow='';if(chatHeader){chatHeader.style.position='';chatHeader.style.top='';chatHeader.style.zIndex='';chatHeader.style.flexShrink=''}setTimeout(()=>{chatMessages.scrollTop=currentScrollTop},50);this.preventPageZoom()}}preventPageZoom(){const viewport=document.querySelector('meta[name="viewport"]');if(viewport){viewport.setAttribute('content','width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')}setTimeout(()=>{document.body.style.zoom='1';document.documentElement.style.zoom='1'},100)}initLoginInputAdaptation(){const loginInputs=document.querySelectorAll('#loginUsername, #loginPassword, #registerUsername, #registerEmail, #registerPassword, #registerConfirmPassword');const loginContainer=document.querySelector('.login-container');const loginBox=document.querySelector('.login-box');if(!loginInputs.length||!loginContainer||!loginBox)return;const isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||window.innerWidth<=768;if(!isMobile)return;let isKeyboardOpen=false;let originalViewportHeight=window.innerHeight;const handleViewportChange=()=>{const currentHeight=window.innerHeight;const heightDifference=originalViewportHeight-currentHeight;if(heightDifference>150){if(!isKeyboardOpen){isKeyboardOpen=true;this.adaptLoginToKeyboard(true,loginContainer,loginBox)}}else{if(isKeyboardOpen){isKeyboardOpen=false;this.adaptLoginToKeyboard(false,loginContainer,loginBox)}}};loginInputs.forEach(input=>{input.addEventListener('focus',()=>{setTimeout(()=>{handleViewportChange()},300)});input.addEventListener('blur',()=>{isKeyboardOpen=false;this.adaptLoginToKeyboard(false,loginContainer,loginBox)})});window.addEventListener('resize',handleViewportChange);if(window.visualViewport){window.visualViewport.addEventListener('resize',handleViewportChange)}}adaptLoginToKeyboard(isOpen,loginContainer,loginBox){if(!loginContainer||!loginBox)return;if(isOpen){loginContainer.style.position='fixed';loginContainer.style.top='0';loginContainer.style.left='0';loginContainer.style.right='0';loginContainer.style.bottom='0';loginContainer.style.height='100vh';loginContainer.style.maxHeight='100vh';loginContainer.style.overflow='hidden';loginBox.style.maxHeight='calc(100vh - 40px)';loginBox.style.overflowY='auto';loginBox.style.webkitOverflowScrolling='touch';setTimeout(()=>{const activeElement=document.activeElement;if(activeElement&&activeElement.tagName==='INPUT'){activeElement.scrollIntoView({behavior:'smooth',block:'center'})}},100)}else{loginContainer.style.position='';loginContainer.style.top='';loginContainer.style.left='';loginContainer.style.right='';loginContainer.style.bottom='';loginContainer.style.height='';loginContainer.style.maxHeight='';loginContainer.style.overflow='';loginBox.style.maxHeight='';loginBox.style.overflowY='';loginBox.style.webkitOverflowScrolling='';this.preventPageZoom()}}async generateImage(prompt){if(!this.currentSession){await this.createNewSession();if(!this.currentSession)return}this.isLoading=true;this.updateSendButton();this.disableUserInput(true);try{this.addMessageToUI({role:'user',content:`🎨生成图片：${prompt}`,created_at:new Date().toISOString()});const messageInput=document.getElementById('messageInput');messageInput.value='';const thinkingMessageId=this.addThinkingMessage();this.scrollToBottom();const response=await this.apiCall('/generate-image',{method:'POST',body:{prompt:prompt,session_id:this.currentSession.id}});this.removeThinkingMessage(thinkingMessageId);if(response.success){console.log('🎨 图片生成成功:',{hasImage:!!response.image,hasText:!!response.text,imageLength:response.image?response.image.length:0,textLength:response.text?response.text.length:0,mimeType:response.mimeType,responseTime:response.response_time});let messageContent='';if(response.text){messageContent+=this.formatMessageText(response.text)}if(response.image){const imageHtml=`<div class="generated-image"><img src="data:${response.mimeType || 'image/png'};base64,${response.image}"alt="${prompt}"/><p class="image-prompt">提示词：${prompt}</p><p class="image-time">生成时间：${response.response_time.toFixed(2)}秒</p></div>`;messageContent+=imageHtml}if(!response.text&&!response.image){this.showNotification('图片生成失败：没有返回内容','error');return}this.addMessageToUI({role:'assistant',content:messageContent,created_at:new Date().toISOString()});this.scrollToBottom();if(response.text&&response.image){this.showNotification('文字和图片生成成功！','success')}else if(response.text){this.showNotification('文字生成成功！','success')}else if(response.image){this.showNotification('图片生成成功！','success')}setTimeout(()=>{if(this.isMobile){this.updateSessionListOnly()}else{this.loadSessions()}},1000)}else{this.showNotification('正在开发生成图片功能中，请勿使用')}}catch(error){this.showNotification('正在开发生成图片功能中，请勿使用');this.removeThinkingMessage(thinkingMessageId)}finally{this.isLoading=false;this.updateSendButton();this.disableUserInput(false)}}}const app=new GeminiChatApp();
